% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/maxnet.R, R/maxnet.default.regularization.R,
%   R/maxnet.formula.R
\name{maxnet}
\alias{maxnet}
\alias{maxnet.default.regularization}
\alias{maxnet.formula}
\title{Maxent over glmnet}
\usage{
maxnet(
  p,
  data,
  f = maxnet.formula(p, data),
  regmult = 1,
  regfun = maxnet.default.regularization,
  addsamplestobackground = T,
  ...
)

maxnet.default.regularization(p, m)

maxnet.formula(p, data, classes = "default")
}
\arguments{
\item{p}{numeric, a vector of 1 (for presence) or 0 (for background)}

\item{data}{a matrix or data frame of predictor variables}

\item{f}{formula, determines the features to be used}

\item{regmult}{numeric, a constant to adjust regularization}

  \code{1/(1+exp(-entropy-lp))} if \code{type} is "logistic".
  
  \code{data}: categorical predictor variables must be designated as \code{factors}.

  \code{classes}: feature classes, with \code{l} = "linear", \code{q} = "quadratic",
\code{p} = "product", \code{h} = "hinge", and \code{t} = "threshold". Features are simple
mathematical transformations of the input continuous predictors. Categorical predictors
are used as-is. The default classes used are based on sample size of presence points (\code{np}) 
as follows:

  \code{(np < 10) classes <- "l" }
  
  \code{(np < 15) classes <- "lq" }
  
  \code{(np < 80) classes <- "lqh" }
  
  \code{else classes <- "lqph" }
  
  \code{maxnet.formula}: is used to calculate the above default classes. To override this,
either designate the classes to use with \code{classes} and set \code{f = NULL}, or set
\code{classes = NULL} and set \code{f} to your own formula.

  \code{regfun}: by default uses the \code{maxnet.default.regularization} function to calculate
the base regularization constant for each feature. The output vector is then multiplied 
by \code{regmult} to create the vector of \code{penalty.factor}s to pass on to the \code{glmnet} call.

}
\value{
Maxnet returns an object of class \code{maxnet}, which is a list
consisting of a glmnet model with the following elements added:
\describe{
\item{betas}{ nonzero coefficients of the fitted model }
\item{alpha}{ constant offset making the exponential model sum to one over the background data }
\item{entropy}{ entropy of the exponential model }
\item{penalty.factor}{ the regularization constants used for each feature }
\item{featuremins}{ minimum of each feature, to be used for clamping }
\item{featuremaxs}{ maximum of each feature, to be used for clamping }
\item{varmin}{ minimum of each predictor, to be used for clamping }
\item{varmax}{ maximum of each predictor, to be used for clamping }
\item{samplemeans}{ mean of each predictor over samples (majority for factors) }
\item{levels}{ levels of each predictor that is a factor }
}
\seealso{
  \code{\link[glmnet]{glmnet}}
}
\author{
  Steven Phillips, with some edits and expansions by Michelle M. Fink
}
\description{
Maxent species distribution modeling using glmnet for model
fitting

Using \code{lp} for the linear predictor and \code{entropy} for the entropy
of the exponential model over the background data, the values plotted on
the y-axis are:

\itemize{ \item{\code{lp} if \code{type} is "link"}

\item{\code{exp(lp)} if \code{type} is "exponential"}

\item{\code{1-exp(-exp(entropy+lp))} if \code{type} is "cloglog"}

\item{\code{1/(1+exp(-entropy-lp))} if \code{type} is "logistic"} }
}
\examples{
\dontrun{
  library(maxnet)
  data(bradypus)
  p <- bradypus$presence
  data <- bradypus[,-1]
  mod <- maxnet(p, data)
  plot(mod, type="cloglog")
  mod <- maxnet(p, data, maxnet.formula(p, data, classes="lq"))
  plot(mod, "tmp6190_ann")
}
}
\author{
Steve Phillips
}
